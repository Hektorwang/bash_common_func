#!/bin/bash
# shellcheck disable=SC1090,SC1091,SC2034,SC2046,SC2086,SC2116,SC2154

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export 'NLS_LANG=american_america.AL32UTF8'

#color level
SETCOLOR_DEBUG="echo -en \\033[1;37m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_ERROR="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"

##################################################
# 向标准 (错误) 输出和指定文件中写入日志
# 所有日志函数返回值都是0, 执行日志函数的结果必为成功. 但是打印到屏幕是分为stdout和stderr的
# 全局变量:
#   log_file
# 参数:
#   日志内容
# 输出:
#   封装后的日志信息
##################################################
script_name=$(basename "$0" 2>/dev/null)

function LOGINFO() { # 打印日志: 信息级别, stdout
  local time msg IFS
  IFS=$' \t\n'
  time=$(date "+[%F %T]")
  msg="${time}\tINFO\t${script_name}\t$*"
  echo -e "${msg}" | tee -a "${log_file:-/dev/null}"
  ${SETCOLOR_NORMAL}
  return 0
}

function LOGSUCCESS() { # 打印日志: 成功级别, stdout
  local time msg IFS
  IFS=$' \t\n'
  time=$(date "+[%F %T]")
  msg="${time}\tSUCCESS\t${script_name}\t$*"
  ${SETCOLOR_SUCCESS}
  echo -e "${msg}" | tee -a "${log_file:-/dev/null}"
  ${SETCOLOR_NORMAL}
  return 0
}

function LOGWARNING() { # 打印日志: 警告级别, stderr
  local time msg IFS
  IFS=$' \t\n'
  time=$(date "+[%F %T]")
  msg="${time}\tWARNING\t${script_name}\t$*"
  ${SETCOLOR_WARNING}
  {
    echo -e "${msg}" | tee -a "${log_file:-/dev/null}" 
  } >&2
  ${SETCOLOR_NORMAL}
  return 0
}

function LOGERROR() { # 打印日志: 失败级别, stderr
  local time msg IFS
  IFS=$' \t\n'
  time=$(date "+[%F %T]")
  msg="${time}\tERROR\t${script_name}\t$*"
  ${SETCOLOR_ERROR}
  {
    echo -e "${msg}" | tee -a "${log_file:-/dev/null}"
  } >&2
  ${SETCOLOR_NORMAL}
  return 0
}

function LOGDEBUG() { # 打印日志: 失败级别, stderr
  local time msg IFS
  IFS=$' \t\n'
  time=$(date "+[%F %T]")
  msg="${time}\tDEBUG\t${script_name}\t$*"
  ${SETCOLOR_DEBUG}
  {
    echo -e "${msg}" | tee -a "${log_file:-/dev/null}"
  } >&2
  ${SETCOLOR_NORMAL}
  return 0
}

#######################################
# 将字符串去掉头尾的" |\n|\r|\t"
# Globals:
# Arguments:
#   $1 需要strip的字符串
# Outputs:
#   $1经过strip的值
# Returns:
#   None
#######################################
function str_strip {
  local str=$1
  echo ${str} | awk \
    'function trim(str) {sub("^[ \t\n\r]*", "", str);sub("[ \t\n\r]*$", "", str); return str} \
    {printf (trim($0))}'
}

function read_conf {
  #######################################
  # 读取ini文件中指定section下指定key的value
  # Globals:
  #   $key
  # Arguments:
  #   $1 ini文件
  #   $2 section
  #   $3 key
  # Outputs:
  #   None
  # Returns:
  #   None
  #######################################

  # 读取section、keyword形式的配置文件 read_conf conf_file section key

  local self_conf=$1 # ini文件
  local self_sect=$2 # section
  local self_key=$3  # key

  temp_conf=$(grep -vE "^$|^#|^;" "${self_conf}" |
    sed -n "/\[${self_sect}\]/I,/\[/p" |
    sed "/^\[/d")
  self_result=$(echo "${temp_conf}" |
    awk -F '=' \
      'BEGIN{IGNORECASE=1} $1~/^'"${self_key}"'$/{res=$2}END{print res}')
  self_result=$(str_strip "${self_result}")
  eval "$(echo "${self_key}"="${self_result}")"
}

function read_conf_section() { # 读取section、keyword形式的配置文件并将整个section的所有k-v都声明出来 read_conf conf_file section
  OLDIFS=${IFS}
  IFS=$'\n'
  self_sect=$2
  self_conf=$1
  temp_conf=$(grep -v "^#" "$self_conf" | grep -v "^$" | sed -n "/\[${self_sect}\]/I,/^\[/p" | sed "/^\[/d")
  for line in ${temp_conf}; do
    #echo $line
    eval "${line}"
  done
  IFS=${OLDIFS}
}

function getSections() { # 读取ini文件所有的sections ,参数个数 1,参数 1 :ini 文件名
  if [[ -f "$1" ]]; then
    sections=$(grep -Po '(?<=\[).*(?=\])' "$1")
    echo "${sections}"
  else
    echo "$1":配置文件不存在
  fi
}

function check_var() { # 如果变量3不在环境变量里,就读配置文件,如果配置文件也没有就报错退出
  local key
  key=$(eval echo $(echo "$"$3))
  [[ "" == "${key}" ]] && read_conf "$1" "$2" "$3"
  key=$(eval echo $(echo "$"$3))
  [[ "" == "${key}" ]] && LOGERROR "$3 变量为空，请检查配置文件。 " && exit 3
}

function quota_cpu() { # 限制CPU使用率, 使用方法: quota_cpu 限定使用的核数, 注意调用该函数的脚本在执行完成后需自行删除 ${pdir} cgdelete -r cpu,cpuacct:${script_name}
  if ! (ls /sys/fs/cgroup/cpu,cpuacct &>/dev/null); then
    LOGERROR "该机器未安装cgroup, 无法控制cpu使用率"
    return
  fi
  local quota=$1
  local script_name
  script_name=$(basename "$0")
  local pid=$$
  local period_us=100000
  local quota_us
  quota_us=$(echo "scale=0;${period_us}"*"${quota}/1" | bc)
  pdir=/sys/fs/cgroup/cpu,cpuacct/${script_name}
  mkdir -p "${pdir}"
  echo "${pid}" >"${pdir}"/cgroup.procs
  echo "${period_us}" >"${pdir}"/cpu.cfs_period_us
  echo "${quota_us}" >"${pdir}"/cpu.cfs_quota_us
}

#######################################
# 版本号比较, gt lt eq ge le
# Arguments:
#   $1 需比较的版本号 如1.1.1q
#   $2 需比较的版本号 如1.1.1t
# Outputs:
#   None
# Returns:
#   true/false
#######################################
function version_gt {
  test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"
}
function version_lt {
  test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1"
}
function version_eq {
  test $1 == $2
}
function version_ge {
  version_gt "$@" || version_eq "$@"
}
function version_le {
  version_lt "$@" || version_eq "$@"
}

##################################################
# 开启 xtrace 调试模式
# 全局变量:
#   DEBUG
# 参数:
#   "$@" (脚本级别位置变量 $@)
##################################################
debug() {
  if [[ "$(eval echo "\${$#}")" != "debug" ]]; then
    DEBUG=false
    return 0
  fi
  DEBUG=true
  PS4='+ { \033[1;32m${LINENO} \033[1;34m${FUNCNAME[0]}\033[0m } '
  set -x
}

##################################################
# 当用户中止执行时, 调用此函数输出提示信息, 脚本退出
# 参数:
#   None
# 输出:
#   脚本中止的提示信息
##################################################
gracefully_abort() {
  echo -en "\033[1;0m"
  LOGWARNING "用户中止执行，脚本退出"
  exit 1
}

##################################################
# 尝试优雅地中止进程及其子进程, 若等待时间内未成功中止, 则进行暴力中止
# 参数:
#   PID
#   用于优雅中止的信号量 (可选参数, 默认 15|TERM)
#   优雅中止等待时间 (可选参数, 默认 30 秒. 
#     合法的单位有: s|m|h|d. 无单位默认 s. 支持小数)
# 输出:
#   遇到错误则将错误信息输出到 stderr
# 返回:
#   遇到错误则 exit 1
##################################################
proc_killer() {
  # 参数检测
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    local -r pid="$1"
  else
    LOGERROR "${FUNCNAME[0]}: 接收参数异常(PID: $1)"
  fi
  local sig="TERM"
  if [[ -n "$2" ]]; then
    # 针对 sh 执行脚本调用此函数时 kill -l 执行异常的情况做适配
    set +o posix
    if kill -l "$2" &>/dev/null; then
      sig="$2"
    else
      LOGERROR "${FUNCNAME[0]}: 接收参数异常(SIGNAL: $2)"
    fi
  fi
  local term_grace_duration=30
  if [[ -n "$3" ]]; then
    term_grace_duration="$(_conv2sec "$3")" \
      || LOGERROR "${FUNCNAME[0]}: 接收参数异常(DURATION: $3)"
  fi

  # 判断进程是否存活
  if kill -0 "${pid}" &>/dev/null; then
    # 屏蔽形如 "line 162: 3751 Terminated" 的输出
    #disown "${pid}" &>/dev/null
    # 优雅中止
    kill -"${sig}" -- "${pid}" &>/dev/null
    # 优雅中止缓冲等待
    sig="KILL"
    local timer=0.0
    local -r step=0.2
    local cmp_res
    while sleep "${step}"; do
      kill -0 "${pid}" &>/dev/null || break
      timer="$(echo "${timer}" | awk -v step="${step}" '{print step+$0}')"
      cmp_res="$(
        echo "${timer} ${term_grace_duration}" | awk '{print ($1>$2)?1:0}'
      )"
      # 缓冲期结束进程仍未中止, 则进行暴力中止
      if (( cmp_res == 1 )); then
        kill -"${sig}" -- "${pid}" &>/dev/null
        break
      fi
    done
  fi
}

##################################################
# 简版 timeout 命令, 用法: tmout DURATION COMMAND 
# 参数:
#   持续时间 (支持小数. 合法的单位有: s|m|h|d. 无单位默认 s)
#   执行的命令
# 输出:
#   遇到错误则将错误信息输出到 stderr
# 返回:
#   遇到错误则 exit 1, 超时 return 124
##################################################
tmout() {
  (( $# < 2 )) && LOGERROR "${FUNCNAME[0]}: 接收参数异常(\$*: $*)"

  # 获取超时时间和希望执行的命令
  local duration
  duration="$(_conv2sec "$1")" \
    || LOGERROR "${FUNCNAME[0]}: 接收参数异常(DURATION: ${1})"
  shift 1
  local cmd=( "$@" )

  # 运行后台任务
  "${cmd[@]}" &
  local pid="$!"
  [[ -z "${pid}" ]] && LOGERROR "${FUNCNAME[0]}: ${cmd[*]}后台任务异常"

  # 时间控制
  local timer=0.0
  local -r step=0.2
  while sleep "${step}"; do
    timer="$(echo "${timer}" | awk -v step="${step}" '{print step+$0}')"
    (( "$(echo "${timer} ${duration}" | awk '{print ($1>$2)?1:0}')" == 1 )) \
      && break
    kill -0 "${pid}" &>/dev/null || break
  done

  # 杀掉仍存活的进程
  proc_killer "${pid}" "SIGTERM" 10 # 2>/dev/null

  # 定义返回码
  wait "${pid}" &>/dev/null
  local ret_code="$?"
  (( ret_code > 128 )) && ret_code=124
  return "${ret_code}"
}
