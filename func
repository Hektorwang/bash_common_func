#!/bin/bash
# shellcheck disable=SC1090,SC1091,SC2034,SC2046,SC2086,SC2116,SC2154

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export 'NLS_LANG=american_america.AL32UTF8'

readonly SETCOLOR_DEBUG="echo -en \\033[1;37m"
readonly SETCOLOR_NORMAL="echo -en \\033[0;39m"
readonly SETCOLOR_SUCCESS="echo -en \\033[1;32m"
readonly SETCOLOR_ERROR="echo -en \\033[1;31m"
readonly SETCOLOR_WARNING="echo -en \\033[1;33m"

script_name=$(basename "$0" 2>/dev/null)
readonly script_name
##################################################
# 向标准 (错误) 输出和指定文件中写入日志
# 所有日志函数返回值都是0, 执行日志函数的结果必为成功. 但是打印到屏幕是分为stdout和stderr的
# 全局变量:
#   log_file
# 参数:
#   日志内容
# 输出:
#   封装后的日志信息
##################################################
function __log() {
    local level="$1"
    shift
    local timestamp line message color_func out_fd
    timestamp=$(date "+%F %T")
    line="${BASH_LINENO[1]:-0}"
    message="$*"
    case "$level" in
    DEBUG)
        ${SETCOLOR_DEBUG}
        out_fd="2"
        ;;
    INFO)
        ${SETCOLOR_NORMAL}
        out_fd="1"
        ;;
    SUCCESS)
        ${SETCOLOR_SUCCESS}
        out_fd="1"
        ;;
    WARNING)
        ${SETCOLOR_WARNING}
        out_fd="2"
        ;;
    ERROR)
        ${SETCOLOR_ERROR}
        out_fd="2"
        ;;
    *)
        ${SETCOLOR_NORMAL}
        out_fd="1"
        ;;
    esac
    {
        printf "%-23s | %-8s | %s:%s - %s\n" \
            "${timestamp}" "${level}" "${script_name}" "${line}" "${message}"
        ${SETCOLOR_NORMAL}
    } | tee -a "${log_file:-/dev/null}" >&"${out_fd}"
    return 0
}

function LOGDEBUG { __log "DEBUG" "$@"; }
function LOGINFO { __log "INFO" "$@"; }
function LOGSUCCESS { __log "SUCCESS" "$@"; }
function LOGWARNING { __log "WARNING" "$@"; }
function LOGERROR { __log "ERROR" "$@"; }
export -f LOGDEBUG LOGINFO LOGSUCCESS LOGWARNING LOGERROR

#######################################
# 删除前导和末尾的空格、制表符、换行符、回车符、全角空格
# Globals:
# Arguments:
#   $1 需要strip的字符串
# Outputs:
#   $1经过strip的值
# Returns:
#   None
#######################################
function str_strip {
    local str="$1"
    echo -n "$str" | sed -E 's/^[[:space:]\xC2\xA0\u3000]+|[[:space:]\xC2\xA0\u3000]+$//g'
}
export -f str_strip

#######################################
# 读取ini文件中第一个指定 section 下第一个指定 key 的 value
# Globals:
# Arguments:
#   ini文件
#   section
#   key
# Outputs:
#   None
# Returns:
#   0: 成功读取
#   1: ini_file 不存在
#   2: 未读取到指定键
#   99: 缺少参数
#######################################
function read_conf {
    local self_conf self_sect self_key temp_conf self_result
    self_conf=$1 # ini文件
    self_sect=$2 # section
    self_key=$3  # key
    if [[ -z "${self_conf}" ]] || [[ -z "${self_sect}" ]] || [[ -z "${self_key}" ]]; then
        LOGERROR "缺少参数: ini_file: \"${self_conf}\" section: \"${self_sect}\" key: \"${self_key}\""
        exit 99
    fi
    if [[ ! -s "${self_conf}" ]]; then
        LOGERROR "配置文件不存在或大小为 0: \"${self_conf}\""
        exit 1
    fi

    temp_conf=$(grep -vE "^\s*$|^\s*#|^\s*;" "${self_conf}" |
        sed -n "/\[${self_sect}\]/I,/\[/p" |
        sed "/^\[/d")

    if [[ -z "${temp_conf}" ]] ||
        ! (echo "${temp_conf}" | grep -qE "^\s*${self_key}\s*="); then
        LOGERROR "段不存在或段内无指定键: \"${self_sect}\", \"${self_key}\""
        exit 2
    else
        # self_result=$(echo "${temp_conf}" |
        #   awk -F '=' 'BEGIN {IGNORECASE=1} $1~/^'"${self_key}"'$/ {res=$2} END {print res}')
        self_result=$(
            echo "${temp_conf}" | grep -E "^\s*${self_key}\s*=" |
                awk -v key="${self_key}" '
        BEGIN {IGNORECASE=1}
        {
          gsub("^[[:space:]]*"key"[[:space:]]*=[[:space:]]*|[[:space:]]+$","",$0)
          print
        }'
        )
        self_result="$(str_strip "${self_result}")"
        # eval "${self_key}"="${self_result}"
        declare -g "${self_key}=${self_result}"
    fi
}
export -f read_conf

function read_conf_section { # 读取section、keyword形式的配置文件并将整个section的所有k-v都声明出来 read_conf conf_file section
    OLDIFS=${IFS}
    IFS=$'\n'
    self_sect=$2
    self_conf=$1
    temp_conf=$(grep -vE "^(\s+)?#|^(\s+)?$" "$self_conf" | sed -n "/\[${self_sect}\]/I,/^\[/p" | sed "/^\[/d")
    for line in ${temp_conf}; do
        eval "${line}"
    done
    IFS=${OLDIFS}
}
export -f read_conf_section

function getSections { # 读取ini文件所有的sections ,参数个数 1,参数 1 :ini 文件名
    if [[ -f "$1" ]]; then
        sections=$(grep -Po '(?<=\[).*(?=\])' "$1")
        echo "${sections}"
    else
        echo "$1":配置文件不存在
    fi
}
export -f getSections

function check_var { # 如果变量3不在环境变量里,就读配置文件,如果配置文件也没有就报错退出
    local key
    key=$(eval echo $(echo "$"$3))
    [[ "" == "${key}" ]] && read_conf "$1" "$2" "$3"
    key=$(eval echo $(echo "$"$3))
    [[ "" == "${key}" ]] && LOGERROR "$3 变量为空，请检查配置文件。 " && exit 3
}
export -f check_var

function quota_cpu { # 限制CPU使用率, 使用方法: quota_cpu 限定使用的核数, 注意调用该函数的脚本在执行完成后需自行删除 ${pdir} cgdelete -r cpu,cpuacct:${script_name}
    if ! (ls /sys/fs/cgroup/cpu,cpuacct &>/dev/null); then
        LOGERROR "该机器未安装cgroup, 无法控制cpu使用率"
        return
    fi
    local quota=$1
    local script_name pdir
    script_name=$(basename "$0")
    local pid=$$
    local period_us=100000
    local quota_us
    quota_us=$(echo "scale=0;${period_us}"*"${quota}/1" | bc)
    pdir=/sys/fs/cgroup/cpu,cpuacct/${script_name}
    mkdir -p "${pdir}"
    echo "${pid}" >"${pdir}"/cgroup.procs
    echo "${period_us}" >"${pdir}"/cpu.cfs_period_us
    echo "${quota_us}" >"${pdir}"/cpu.cfs_quota_us
}
export -f quota_cpu

#######################################
# 版本号比较, gt lt eq ge le
# Arguments:
#   $1 需比较的版本号 如1.1.1q
#   $2 需比较的版本号 如1.1.1t
# Outputs:
#   None
# Returns:
#   true/false
#######################################
function version_gt {
    test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"
}
function version_lt {
    test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1"
}
function version_eq {
    test $1 == $2
}
function version_ge {
    version_gt "$@" || version_eq "$@"
}
function version_le {
    version_lt "$@" || version_eq "$@"
}
export -f version_gt version_lt version_eq version_ge version_le

##################################################
# 开启 xtrace 调试模式
# 全局变量:
#   DEBUG
# 参数:
#   "$@" (脚本级别位置变量 $@)
##################################################
function debug {
    if [[ "$(eval echo "\${$#}")" != "debug" ]]; then
        DEBUG=false
        return 0
    fi
    DEBUG=true
    # PS4='+ { \033[1;32m${LINENO} \033[1;34m${FUNCNAME[0]}\033[0m } '
    PS4='+ ${LINENO} ${FUNCNAME[0]}: '
    set -x
}
export -f debug

##################################################
# 当用户中止执行时, 调用此函数输出提示信息, 脚本退出
# 参数:
#   None
# 输出:
#   脚本中止的提示信息
##################################################
function gracefully_abort {
    echo -en "\033[1;0m"
    LOGWARNING "用户中止执行，脚本退出"
    exit 1
}
export -f gracefully_abort

##################################################
# 尝试优雅地中止进程及其子进程, 若等待时间内未成功中止, 则进行暴力中止
# 参数:
#   PID
#   用于优雅中止的信号量 (可选参数, 默认 15|TERM)
#   优雅中止等待时间 (可选参数, 默认 30 秒.
#     合法的单位有: s|m|h|d. 无单位默认 s. 支持小数)
# 输出:
#   遇到错误则将错误信息输出到 stderr
# 返回:
#   遇到错误则 exit 1
##################################################
function proc_killer {
    if [[ "$1" =~ ^[0-9]+$ ]]; then
        local -r pid="$1"
    else
        LOGERROR "${FUNCNAME[0]}: PID 参数不合法: $1"
        return 1
    fi

    local sig="TERM"
    [[ -n "$2" ]] && sig="$2"

    local term_grace_duration="30s"
    [[ -n "$3" ]] && term_grace_duration="$3"
    term_grace_duration="$(_conv2sec "$term_grace_duration")" || {
        LOGERROR "${FUNCNAME[0]}: 优雅中止时间格式错误: $3"
        return 1
    }

    if kill -0 "${pid}" &>/dev/null; then
        kill -"${sig}" "${pid}" &>/dev/null
        sig="KILL"

        local timer=0.0
        local -r step=0.2
        while sleep "$step"; do
            kill -0 "${pid}" &>/dev/null || break
            timer=$(awk -v a="$timer" -v b="$step" 'BEGIN {printf "%.4f", a+b}')
            if [[ "$(awk -v a="$timer" -v b="$term_grace_duration" 'BEGIN {print (a>b)?1:0}')" == 1 ]]; then
                kill -"${sig}" "${pid}" &>/dev/null
                break
            fi
        done
    fi
}
export -f proc_killer

##################################################
# 将形如 1m, 1h, 1d 的时间转换为相应秒数
# 参数:
#   时间字串 (合法的单位有: s|m|h|d. 无单位默认 s. 支持小数, 例如 0.15h)
# 输出:
#   纯数字 (秒数)
# 返回:
#   遇到错误则 return 1
##################################################
function _conv2sec {
    local input="$1"
    local number unit result

    if [[ -z "$input" ]]; then
        LOGERROR "_conv2sec: 缺少参数"
        return 1
    fi

    # 使用正则提取数字和单位（兼容小数）
    if [[ "$input" =~ ^([0-9]+(\.[0-9]+)?)([smhdSMHD]?)$ ]]; then
        number="${BASH_REMATCH[1]}"
        unit=$(echo "$unit" | tr '[:upper:]' '[:lower:]')
        case "$unit" in
        "") result="$number" ;; # 默认为秒
        "s") result="$number" ;;
        "m") result=$(awk "BEGIN {printf \"%.4f\", $number * 60}") ;;
        "h") result=$(awk "BEGIN {printf \"%.4f\", $number * 3600}") ;;
        "d") result=$(awk "BEGIN {printf \"%.4f\", $number * 86400}") ;;
        *)
            LOGERROR "_conv2sec: 不支持的时间单位: $unit"
            return 1
            ;;
        esac
        echo "$result"
        return 0
    else
        LOGERROR "_conv2sec: 非法时间格式: $input"
        return 1
    fi
}
export -f _conv2sec

##################################################
# 简版 timeout 命令, 用法: tmout DURATION COMMAND
# 参数:
#   持续时间 (支持小数. 合法的单位有: s|m|h|d. 无单位默认 s)
#   执行的命令
# 输出:
#   遇到错误则将错误信息输出到 stderr
# 返回:
#   遇到错误则 exit 1, 超时 return 124
##################################################
function tmout {
    (($# < 2)) && LOGERROR "${FUNCNAME[0]}: 参数不足 (\$*: $*)" && return 1

    local duration
    duration="$(_conv2sec "$1")" || {
        LOGERROR "${FUNCNAME[0]}: 时间转换失败: $1"
        return 1
    }
    shift 1
    local cmd=("$@")

    "${cmd[@]}" &
    local pid="$!"

    if [[ -z "${pid}" ]]; then
        LOGERROR "${FUNCNAME[0]}: 子进程执行失败"
        return 1
    fi

    local timer=0.0
    local -r step=0.2
    while sleep "$step"; do
        timer=$(awk -v a="$timer" -v b="$step" 'BEGIN {printf "%.4f", a+b}')
        [[ "$(awk -v a="$timer" -v b="$duration" 'BEGIN {print (a>b)?1:0}')" == 1 ]] && break
        kill -0 "$pid" &>/dev/null || break
    done

    proc_killer "$pid" "SIGTERM" "10s" # 默认优雅终止等待时间

    wait "$pid" 2>/dev/null
    local ret=$?
    ((ret > 128)) && ret=124
    return "$ret"
}
export -f tmout

#################################### cc=79 ####################################
# 转换 syslog 日志的时间为绝对秒, 该函数为样例不合适直接使用, 实际使用建议加跳出条件
# 注意若日志跨年, 需要在此函数做额外处理, 本函数默认都把时间处理为今年
# 参数:
#   $1: syslog 输出的日志名
# 输出:
#   将 syslog 日志的时间格式转换为绝对秒后的日志
# 返回:
#   遇到错误则 exit 1
#################################### cc=79 ####################################
function convert_syslog_timestamp {
    local syslog_file=$1
    if [[ -f ${syslog_file} ]]; then
        awk '{
            month = substr($0, 1, 3)
            day = substr($0, 5, 2)
            time = substr($0, 8, 8)
            cmd = "date -d \""month " " day " "time" \" +\"%s\""
            cmd |getline timestamp
            close(cmd)
            print timestamp,$0
        }' "${syslog_file}"
    else
        LOGERROR "日志文件不存在: ${syslog_file}"
        return 1
    fi
}

#################################### cc=79 ####################################
# 判断给定的 IP 是否在给定的网段内.
# 参数:
#   $1: 需判断是否在网段内的 IP
#   $2: 用来确定网段的IP/MASK(192.168.1.0/24)
#   $3: 可选, 如 $2 是 IP 形式, 则这里写四位掩码形式(255.255.255.252)
# 输出:
#   IP是否在网段内
# 返回:
#   0: 是
#   1: 否
#   2: 参数不合法
#################################### cc=79 ####################################
function is_ip_in_network() {
    local ip="$1"
    local netmask="$2" # 支持 CIDR 或 网络地址
    local mask="$3"    # 可选，掩码（255.255.255.0）

    if [[ -z "$ip" ]] || [[ -z "$netmask" ]]; then
        return 2
    fi

    awk -v ip="$ip" -v netmask="$netmask" -v mask="$mask" '
    function ip2int(ipstr,    n, a, i, ipint) {
        n = split(ipstr, a, ".")
        if (n != 4) return -1
        ipint = 0
        for (i=1; i<=4; i++) {
            if (a[i] !~ /^[0-9]+$/ || a[i] < 0 || a[i] > 255) return -1
            ipint = ipint * 256 + a[i]
        }
        return ipint
    }
    function cidr2mask(cidr,    maskint, bits) {
        bits = cidr
        if (bits < 0 || bits > 32) return -1
        maskint = 0
        for (i=0; i<32; i++) {
            maskint = maskint * 2 + (i < bits ? 1 : 0)
        }
        return maskint
    }
    BEGIN {
        ipint = ip2int(ip)
        if (ipint == -1) exit 2

        split(netmask, parts, "/")
        if (length(parts) == 2) {
            netip = parts[1]
            cidr = parts[2] + 0
            maskint = cidr2mask(cidr)
            if (maskint == -1) exit 2
        } else if (mask != "") {
            netip = netmask
            maskint = ip2int(mask)
            if (maskint == -1) exit 2
        } else {
            exit 2
        }

        netipint = ip2int(netip)
        if (netipint == -1) exit 2

        if ((ipint & maskint) == (netipint & maskint)) {
            exit 0
        } else {
            exit 1
        }
    }
    '
    return $?
}
export -f is_ip_in_network
